import random
import urllib.request
import json
from PIL import Image
from io import BytesIO
import requests
import sqlite3


# ------------------------ Datenbank für Highscores ------------------------
def create_highscore_db():
    """Erstellt die SQLite-Datenbank für die Highscores, falls sie noch nicht existiert."""
    conn = sqlite3.connect('highscores.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS highscores (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            player_name TEXT,
            score INTEGER
        )
    ''')
    conn.commit()
    conn.close()


def save_highscore(player_name, score):
    conn = sqlite3.connect('highscores.db')
    c = conn.cursor()
    c.execute('INSERT INTO highscores (player_name, score) VALUES (?, ?)', (player_name, score))
    conn.commit()
    conn.close()


def get_top_highscores(limit=5):
    conn = sqlite3.connect('highscores.db')
    c = conn.cursor()
    c.execute('SELECT player_name, score FROM highscores ORDER BY score DESC LIMIT ?', (limit,))
    top_scores = c.fetchall()
    conn.close()
    return top_scores


# ------------------------ Länder-Daten abrufen ------------------------
def get_country_data():
    url = "https://restcountries.com/v3.1/all"
    try:
        import ssl
        context = ssl._create_unverified_context()
        with urllib.request.urlopen(url, context=context) as response:
            data = json.loads(response.read().decode())

        country_dict = {}
        for country in data:
            name = country.get('name', {}).get('common', 'Unbekannt')
            capital = country.get('capital', ['Unbekannt'])[0]
            population = country.get('population', 'Unbekannt')
            flag_url = country.get('flags', {}).get('png', 'Keine Flagge verfügbar')
            country_dict[name] = {'capital': capital, 'population': population, 'flag': flag_url}

        return country_dict
    except Exception as e:
        print(f"Fehler beim Abruf der Daten: {e}")
        return {}


# ------------------------ Spielregeln ------------------------
def show_rules():
    print("\n📜 Spielablauf:")
    print("1. Wähle die Anzahl der Spieler, Namen, Schwierigkeitsstufe und Rundenanzahl.")
    print("2. Es wird eine zufällige Flagge angezeigt. Errate das passende Land.")
    print("3. Danach wird die Hauptstadt und die Einwohnerzahl des Landes abgefragt.")
    print("4. Für jede richtige Antwort gibt es einen Punkt.")
    print("5. Der Spieler mit den meisten Punkten gewinnt!")
    print("\n🎮 Schwierigkeitsstufen:")
    print("- Anfänger: Multiple-Choice-Fragen")
    print("- Pro: Direkte Antwort ohne Auswahlmöglichkeiten")
    print("\n🏆 Highscore:")
    print("- Die besten 5 Spieler werden in der Rangliste angezeigt.")
    print("- Kannst du den Highscore knacken? 😉\n")


def ask_for_rules():
    while True:
        try:
            rules_choice = input("📋 Möchtest du die Spielregeln sehen? (Ja/Nein): ").strip().lower()
            if rules_choice in ["ja", "nein"]:
                if rules_choice == "ja":
                    show_rules()
                break
            else:
                raise ValueError("⚠️ Ungültige Eingabe! Bitte Ja oder Nein angeben.")
        except ValueError as e:
            print(e)


# ------------------------ Spielvorbereitung ------------------------
def get_player_count():
    while True:
        try:
            count = int(input("👥 Wie viele Spieler spielen mit? "))
            if count > 0:
                return count
            else:
                print("⚠️ Bitte eine Zahl größer als 0 eingeben.")
        except ValueError:
            print("⚠️ Ungültige Eingabe. Bitte eine Zahl eingeben.")


def greet_players(player_count):
    players = []
    for i in range(1, player_count + 1):
        name = input(f"👤 Spieler {i}, wie heißt du? ")
        players.append(name)
        print(f"Willkommen, {name}! 😊")
    return players


def choose_difficulty():
    while True:
        difficulty = input("💡 Wähle den Schwierigkeitsgrad (1 = Anfänger | 2 = Pro): ").strip().lower()
        if difficulty in ["1", "anfänger"]:
            return "anfänger"
        elif difficulty in ["2", "pro"]:
            return "pro"
        else:
            print("⚠️ Bitte 1 für 'Anfänger' oder 2 für 'Pro' eingeben.")


def start_game():
    print("\n🌎 Willkommen bei Capture the Flag - Flaggen-Quiz!")
    ask_for_rules()

    player_count = get_player_count()
    players = greet_players(player_count)
    difficulty = choose_difficulty()
    rounds = int(input("🔁 Wie viele Runden möchtest du spielen? "))

    country_data = get_country_data()
    country_names = list(country_data.keys())
    score = {player: 0 for player in players}

    # ------------------------ Spielrunden ------------------------
    for _ in range(rounds):
        country = random.choice(country_names)  # Zufälliges Land auswählen
        flag_url = country_data[country]['flag']  # URL der Flagge
        Image.open(BytesIO(requests.get(flag_url).content)).show()  # Flagge anzeigen
        capital = country_data[country]['capital']  # Hauptstadt
        population = country_data[country]['population']  # Bevölkerung

        # Fragen für jeden Spieler
        for player in players:
            print(f"\n{player}, du bist dran!")

            # Land erraten
            if difficulty == "anfänger":
                choices = random.sample(country_names, 3) + [country]
                random.shuffle(choices)
                for i, choice in enumerate(choices, 1):
                    print(f"{i}. {choice}")
                answer = input("🌍 Wähle die richtige Nummer: ")
                if choices[int(answer) - 1] == country:
                    score[player] += 1
                    print("✅ Richtig!")
                else:
                    print(f"❌ Falsch! Die richtige Antwort war {country}.")
            else:
                answer = input("🌍 Nenne das Land zur Flagge: ")
                if answer.strip().lower() == country.lower():
                    score[player] += 1
                    print("✅ Richtig!")
                else:
                    print(f"❌ Falsch! Die richtige Antwort war {country}.")

            # Hauptstadt erraten
            capital_answer = input(f"🏙️ Was ist die Hauptstadt von {country}? ")
            if capital_answer.strip().lower() == capital.lower():
                score[player] += 1
                print("✅ Richtig!")
            else:
                print(f"❌ Falsch! Die richtige Antwort war {capital}.")

            # Einwohnerzahl erraten
            population_answer = input(f"👥 Wie viele Einwohner hat {country}? (Grobe Schätzung erlaubt) ")
            if population_answer.replace(',', '').isdigit():
                print(f"ℹ️ Die tatsächliche Einwohnerzahl ist {population}.")
            else:
                print("⚠️ Ungültige Eingabe.")

    # ------------------------ Endergebnisse ------------------------
    print("\n🎉 Spiel beendet! Punktestand:")
    for player, points in score.items():
        print(f"🏅 {player}: {points} Punkte")

    # ------------------------ Highscores ------------------------
    print("\n🏆 Highscore:")
    for player, points in score.items():
        save_highscore(player, points)

    # Top 5 Highscores anzeigen
    print("\n🔥 Die besten 5 Spieler aller Zeiten:")
    top_scores = get_top_highscores()
    for i, (player_name, score) in enumerate(top_scores, 1):
        print(f"{i}. {player_name} - {score} Punkte")


# ------------------------ Hauptfunktion ------------------------
if __name__ == "__main__":
    create_highscore_db()  # Datenbank für Highscores erstellen
    start_game()